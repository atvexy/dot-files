;; Created   by https://github.com/rxyhn
;; Designed  by https://github.com/rxyhn

;; Modified  by https://github.com/Caszual
;; Maintaned by https://github.com/Caszual

;; put path to aesthetic bar config files here ;;
(defvar eww "eww -c $HOME/.config/eww/bar")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Widget Section's							 ;;	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Launcher Widgets ;;
(defwidget launcher []
	(box :orientation "h" 
		 :space-evenly "false" 
		 :spacing -15
  	(button :class "launcher_icon" 
		   	:onclick "scripts/popup launcher"  "󰣇")))

;; Workspaces Widgets ;;
(defwidget workspaces []
	(literal :content workspace))
(deflisten workspace "scripts/workspace")

;; Battery Widgets ;;
(defwidget bat []
	(box	:orientation "h"	
			:space-evenly "false"
	(label	:class "bat"		
			:halign "end"		
			:text battery	
			:tooltip "Battery: ${battery-cappacity}%")))
(defpoll battery			:interval "1s"	"scripts/battery icon")
(defpoll battery-cappacity	:interval "1s"	"scripts/battery percent")

;; Wifi Widgets ;;
(defwidget wifi []
	(box		:orientation "h"  
				:tooltip wifi-name
	(button		:onclick "scripts/popup wifi" 
				:class "wifi-icon" wifi-icon)))
(defpoll wifi-icon :interval "1s" "scripts/wifi icon")
(defpoll wifi-name :interval "1s" "scripts/wifi name")

;; Brightness Widgets ;;
(defwidget bright []
  (eventbox :onhover "${eww} update bright=true"   
  			:onhoverlost "${eww} update bright=false"
  			(box    :orientation "h"  
			  		:space-evenly "false"  
					:spacing 2
  			(revealer :transition "slideleft" 
			  		  :reveal bright   
					  :duration "550ms"
  			(scale :class "bribar" 
			  	   :value current-brightness 
				   :tooltip "Brightness: ${current-brightness}%" 
				   :onchange "brightnessctl set {}%" 
				   :orientation "h" 
				   :flipped true 
				   :max 101 
				   :min 0))
  			(label :class "brightness-icon" 
			  	   :text "󰃠"))))
(defpoll current-brightness :interval "1s" "brightnessctl -m -d amdgpu_bl0 | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defvar bright false)

;; Volume Widgets ;;
(defwidget volum []
	(eventbox :onhover "${eww} update volum=true" 		
			  :onhoverlost "${eww} update volum=false"
	(box      :orientation "h" 	  
			  :space-evenly "false" 
			  :spacing "2"
	(revealer :transition "slideleft" 
			  :reveal volum         
			  :duration "550ms"
	(scale    :class "volbar" 	  
			  :value current-volume 
			  :orientation "h"      
			  :flipped true 
			  :tooltip "Volume: ${current-volume}%" 
			  :max 101 
			  :min 0 
			  :onchange "amixer -D pulse sset Master {}%" ))
	(button   :onclick "scripts/popup audio"   :class "volume-icon" "󰕾"))))
(defpoll current-volume :interval "1s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defvar volum false)

;; Control Panel Widgets ;;	
(defwidget control []
	(box :orientation "h" 
		 :space-evenly false  
		 :class "control"
(bat)
(wifi)
(bright)
(volum)
))

;; Clock Widgets ;;
(defwidget time []
	(box	:orientation "h" 
			:class "time" 
			:halign "end"
			:space-evenly false
	(button	:onclick "scripts/popup calendar"	
			:class "time-hour" hour)
	(label	:text ""	
			:class "time-separator")
	(button	:onclick "scripts/popup calendar"	
			:class "time-min"  min)))
(defpoll hour	:interval "1s"	"date '+%H'")
(defpoll min	:interval "1s"	"date '+%M'")

;; Calendar Widgets ;;
(defwidget cal []
	(box :class "cal-box" 
		 :orientation "h"
	(box :class "cal-inner-box"
	(calendar :class "cal" 
			  :day calendar_day 
			  :month calendar_month 
			  :year calendar_year))))
(defpoll calendar_day :interval "10h"
    "date '+%d'")
(defpoll calendar_month :interval "10h"
    "scripts/calendar")
(defpoll calendar_year :interval "10h"
    "date '+%Y'")

;; Powermenu Widgets ;;
(defwidget power []
	(eventbox	:onhover "${eww} update power=true"	
				:onhoverlost "${eww} update power=false" 
	(box		:orientation "h"					
				:space-evenly "false" 	 
				:hexpand "false" 	
				:class "powermenu"
	(revealer	:transition "slideleft"				
				:reveal power			 
				:duration "550ms"
	(box		:orientation "h"					
				:space-evenly "false"

;;	(button   	:class "button-bspres"  			
;;				:tooltip "BSPWM Restart" 
;;				:onclick "bspc wm -r" "" )

  	(button		:class "button-reb"					
	  			:tooltip "Reboot"		 
				:onclick "systemctl reboot"	"")

	(button		:class "button-quit" 				
				:tooltip "Logout" 		 
				:onclick "hyprctl dispatch exit" "")

	(button		:class "button-lock" 				
				:tooltip "Lock Screen"	 
				:onclick "betterlockscreen -l"	"")))

	(button		:class "button-off"					
				:tooltip "Shutdown"		 
				:onclick "systemctl poweroff"	""))))
(defvar power false)

;; Top Widgets ;;
(defwidget top []
	(box	:orientation "h" 
			:space-evenly "false" 
			:halign "start" 
(launcher)
;;(workspaces)
))

;; Bottom Widgets ;;
(defwidget bottom []
	(box	:orientation "h" 
			:space-evenly false 
;;(time)
(power)))

;; End Widgets ;;
(defwidget end []
	(box :orientation "h" 
		 :space-evenly "false" 
		 :halign "end" 
		 :spacing 5
(control)
(bottom)))

(defwidget center []
	(box :orientation "h"
		 :space-evenly "false"
		 :halign "center"
(time)))

;; Bar Widgets ;;
(defwidget bar []
	(box :class "eww_bar" 
		 :orientation "h" 
		 :vexpand "false" 
		 :hexpand "false"
(top)
(center)
(end)
))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Window Section's							 ;;	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Bar Windows ;;
(defwindow bar
	:geometry (geometry :x "0" 
						:y "0" 
						:width "100%" 
						:height "25px"
						:anchor "center top")
	:monitor 0
	:stacking "fg"
	:exclusive true
	;;:hexpand "false"
	;;:vexpand "false"
(bar))

;; Calendar Windows ;;
(defwindow calendar
	:geometry (geometry :x "70px" 
						:y "65%" 
						:width "270px" 
						:height "60px")
(cal))





